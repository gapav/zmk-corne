/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        qw_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <12 13>;
            layers = <0>;
            require-prior-idle-ms = <150>;
            slow-release;
        };

        combo_tab {
            bindings = <&none>;
            key-positions = <37 40>;
            slow-release;
            layers = <0>;
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 37 38>;
            require-prior-idle-ms = <150>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
            require-prior-idle-ms = <150>;
        };

        caps_word_layer: caps_word_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS_WORD_LAYER";
            bindings = <&mo>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
        };

        sticky_shift_layer: sticky_shift_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_SHIFT_LAYER";
            bindings = <&mo>, <&sticky_quick>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
        };

        a_esc: a_esc {
            compatible = "zmk,behavior-hold-tap";
            label = "A_ESC";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
        };

        enter_tab: enter_tab {
            compatible = "zmk,behavior-hold-tap";
            label = "ENTER_TAB";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        sticky_quick: sticky_quick {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_QUICK";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };

        q_esc: q_esc {
            compatible = "zmk,behavior-tap-dance";
            label = "Q_ESC";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp ESC>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &q_esc           &kp W            &kp F         &kp P          &kp B                               &kp J      &kp L               &kp U         &kp Y             &kp BACKSPACE     &none
&none  &hml LEFT_GUI A  &hml LEFT_ALT R  &hml LCTRL S  &hml LSHIFT T  &kp G                               &kp M      &hmr RIGHT_SHIFT N  &hmr RCTRL E  &hmr RIGHT_ALT I  &hmr RIGHT_GUI O  &none
&none  &kp Z            &kp X            &kp C         &kp D          &kp V                               &kp K      &kp H               &kp COMMA     &kp DOT           &kp FSLH          &none
                                         &none         &lt 1 TAB      &sticky_shift_layer 3 LEFT_SHIFT    &kp ENTER  &lt 2 SPACE         &none
            >;
        };

        nav {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans        &trans        &trans     &kp PRINTSCREEN  &kp F12    &caps_word  &kp PAGE_UP     &kp UP_ARROW  &trans     &trans   &none
&trans  &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT   &kp ESC    &kp HOME    &kp LEFT_ARROW  &kp DOWN      &kp RIGHT  &kp END  &none
&trans  &trans        &trans        &trans     &trans           &trans     &trans      &kp PAGE_DOWN   &trans        &trans     &trans   &trans
                                    &trans     &trans           &trans     &trans      &trans          &trans
            >;
        };

        symb {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp EXCL       &kp AT     &kp HASH           &kp DLLR          &kp PRCNT               &kp CARET              &kp AMPS           &kp BACKSLASH    &kp PIPE          &trans     &none
&trans  &kp SEMICOLON  &none      &kp LEFT_BRACE     &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp EQUAL         &kp GRAVE  &none
&trans  &none          &kp TILDE  &kp DOUBLE_QUOTES  &kp COLON         &kp MINUS               &kp PLUS               &kp ASTERISK       &kp LESS_THAN    &kp GREATER_THAN  &kp SLASH  &none
                                  &trans             &trans            &kp UNDERSCORE          &trans                 &trans             &trans
            >;
        };

        num+ctrl {
            bindings = <
&none  &none      &none      &kp LC(F)  &kp LC(P)  &none        &none    &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp LC(BACKSPACE)  &none
&none  &kp LC(A)  &kp LC(R)  &kp LC(S)  &kp LC(T)  &none        &none    &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &none              &none
&none  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(D)  &kp LC(V)    &kp DOT  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp LC(PERIOD)     &none
                             &none      &none      &none        &mo 4    &kp NUMBER_0  &none
            >;
        };

        layer_3 {
            bindings = <
&none  &none  &none  &none  &none  &none             &none     &none       &none              &none            &none       &none
&none  &none  &none  &none  &none  &bt BT_CLR_ALL    &kp C_PP  &kp C_PREV  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT  &none
&none  &none  &none  &none  &none  &sys_reset        &none     &none       &none              &none            &none       &none
                     &none  &none  &none             &none     &none       &none
            >;
        };
    };
};
